<!DOCTYPE html>
<html class="no-js" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="utf-8">
	<title>accounting.js: JavaScript number and currency formatting library</title>
	<link href="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/style.css" rel="stylesheet">
	<link rel="canonical" href="http://openexchangerates.github.io/accounting.js/">
	<script async="" src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/cbgapi.loaded_1"></script><script async="" src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/cbgapi.loaded_0"></script><script gapi_processed="true" src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/plusone.js" async="" type="text/javascript"></script><script src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/widgets.js" async=""></script><script src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript">
		var _gaq = _gaq || [];
		_gaq.push(['_setAccount', 'UA-17884149-3']);
		_gaq.push(['_trackPageview']);
		(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
		})();
	</script>
</head>

<body data-twttr-rendered="true">
	<section>
		<h1>accounting.js</h1>
		<p><strong>accounting.js</strong> is a tiny JavaScript library by <a href="https://openexchangerates.org/" title="Open Exchange Rates free currency data API" target="_blank">Open Exchange Rates</a>, providing simple and advanced number, money and currency formatting.</p>

		<p>Features custom output formats, parsing/unformatting of numbers, 
easy localisation and spreadsheet-style column formatting (to line up 
symbols and decimals).</p>

		<p>It's lightweight, has no dependencies and is suitable for all client-side and server-side JavaScript applications.</p>

		<p><iframe style="width: 109px; height: 20px;" data-twttr-rendered="true" title="Twitter Tweet Button" class="twitter-share-button twitter-tweet-button twitter-share-button twitter-count-horizontal" src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/tweet_button.htm" allowtransparency="true" scrolling="no" id="twitter-widget-0" frameborder="0"></iframe> &nbsp; <div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 90px; height: 20px;"><iframe title="+1" data-gapiattached="true" src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/fastbutton.htm" name="I0_1423475349105" id="I0_1423475349105" vspace="0" tabindex="0" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" scrolling="no" marginwidth="0" marginheight="0" hspace="0" frameborder="0" width="100%"></iframe></div></p>
		<ul>
			<li><a href="#methods" title="library methods overvew">methods &amp; examples</a>
			</li><li><a href="#demo" title="demo">demo</a>
			</li><li><a href="#instructions" title="instructions">instructions</a>
			</li><li><a href="#documentation" title="documentation">documentation</a>
			</li><li><a href="#roadmap" title="roadmap">roadmap</a>
			</li><li><a href="#support" title="support">feedback / support</a>
			</li><li><a href="#download" title="download">download</a>
			</li><li><a href="#links" title="links">links</a>
		</li></ul>
	</section>

	<section id="methods">
		<h2>Library Methods</h2>

		<h4><strong>formatMoney()</strong> - format any number into currency</h4>

		<p>The most basic library function for formatting numbers as money 
values, with customisable currency symbol, precision (decimal places), 
and thousand/decimal separators:</p>
		<pre class="prettyprint lang-js"><span class="com">// Default usage:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="lit">12345678</span><span class="pun">);</span><span class="pln"> </span><span class="com">// $12,345,678.00</span><span class="pln">

</span><span class="com">// European formatting (custom symbol and separators), can also use options object as second parameter:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="lit">4999.99</span><span class="pun">,</span><span class="pln"> </span><span class="str">"€"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="str">"."</span><span class="pun">,</span><span class="pln"> </span><span class="str">","</span><span class="pun">);</span><span class="pln"> </span><span class="com">// €4.999,99</span><span class="pln">

</span><span class="com">// Negative values can be formatted nicely:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(-</span><span class="lit">500000</span><span class="pun">,</span><span class="pln"> </span><span class="str">"£ "</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="com">// £ -500,000</span><span class="pln">

</span><span class="com">// Simple `format` string allows control of symbol position (%v = value, %s = symbol):</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="lit">5318008</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> symbol</span><span class="pun">:</span><span class="pln"> </span><span class="str">"GBP"</span><span class="pun">,</span><span class="pln">  format</span><span class="pun">:</span><span class="pln"> </span><span class="str">"%v %s"</span><span class="pln"> </span><span class="pun">});</span><span class="pln"> </span><span class="com">// 5,318,008.00 GBP</span></pre>


		<h4><strong>formatColumn()</strong> - format a list of values for column-display</h4>

		<p>This table demonstrates how <strong>accounting.js</strong> can take a list of numbers and money-format them with padding to line up currency symbols and decimal places</p>
		<p>In order for the padded spaces to render correctly, the containing element must be CSS styled with <code>white-space: pre</code> (pre-formatted) - otherwise the browser will squash them into single spaces.</p>

		<table id="demo-table">
			<thead>
				<tr>
					<th>Original Number:</th>
					<th>With accounting.js:</th>
					<th>Different settings:</th>
					<th>European format:</th>
					<th>Symbol after value:</th>
				</tr>
			</thead>
			<tbody><tr><td>123.5</td><td>$        123.50</td><td>HK$         124</td><td>€        123,50</td><td>       123.50 GBP</td></tr><tr><td>3456.615</td><td>$      3,456.62</td><td>HK$       3,457</td><td>€      3.456,62</td><td>     3,456.62 GBP</td></tr><tr><td>777888.99</td><td>$    777,888.99</td><td>HK$     777,889</td><td>€    777.888,99</td><td>   777,888.99 GBP</td></tr><tr><td>-5432</td><td>$     -5,432.00</td><td>HK$     (5,432)</td><td>€     -5.432,00</td><td>    -5,432.00 GBP</td></tr><tr><td>-1234567</td><td>$ -1,234,567.00</td><td>HK$ (1,234,567)</td><td>€ -1.234.567,00</td><td>-1,234,567.00 GBP</td></tr><tr><td>0</td><td>$          0.00</td><td>HK$          --</td><td>€          0,00</td><td>         0.00 GBP</td></tr></tbody>
		</table>
		<pre class="prettyprint lang-js"><span class="com">// Format list of numbers for display:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatColumn</span><span class="pun">([</span><span class="lit">123.5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3456.49</span><span class="pun">,</span><span class="pln"> </span><span class="lit">777888.99</span><span class="pun">,</span><span class="pln"> </span><span class="lit">12345678</span><span class="pun">,</span><span class="pln"> </span><span class="pun">-</span><span class="lit">5432</span><span class="pun">],</span><span class="pln"> </span><span class="str">"$ "</span><span class="pun">);</span></pre>


		<h4><strong>formatNumber()</strong> - format a number with custom precision and localisation</h4>

		<p>The base function of the library, which takes any number or array of numbers, runs <code>accounting.unformat()</code> to remove any formatting, and returns the number(s) formatted with separated thousands and custom precision:</p>
		<pre class="prettyprint lang-js"><span class="pln">accounting</span><span class="pun">.</span><span class="pln">formatNumber</span><span class="pun">(</span><span class="lit">5318008</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 5,318,008</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatNumber</span><span class="pun">(</span><span class="lit">9876543.21</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="str">" "</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 9 876 543.210</span></pre>


		<h4><strong>toFixed()</strong> - better rounding for floating point numbers</h4>

		<p>Implementation of toFixed() that treats floats more like decimal 
values than binary, fixing inconsistent precision rounding in JavaScript
 (where some .05 values round up, while others round down):</p>
		<pre class="prettyprint lang-js"><span class="pun">(</span><span class="lit">0.615</span><span class="pun">).</span><span class="pln">toFixed</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span><span class="pln"> </span><span class="com">// "0.61"</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">toFixed</span><span class="pun">(</span><span class="lit">0.615</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span><span class="pln"> </span><span class="com">// "0.62"</span></pre>


		<h4><strong>unformat()</strong> - parse a value from any formatted number/currency string</h4>

		<p>Takes any number and removes all currency formatting. Aliased as <code>accounting.parse()</code></p>
		<pre class="prettyprint lang-js"><span class="pln">accounting</span><span class="pun">.</span><span class="pln">unformat</span><span class="pun">(</span><span class="str">"£ 12,345,678.90 GBP"</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 12345678.9</span></pre>
	</section>

	<section id="demo">
		<h2>Demo / Try it out</h2>


		<h4>Money formatting:</h4>

		<div class="well">
			<p>Enter any number into the box and choose currency. Uses <code>accounting.formatMoney()</code>:</p>
			<p>
				<select id="demo-number-symbol">
					<option selected="selected" value="$ ">$</option>
					<option value="£ ">£</option>
					<option value="HK$ ">HK$</option>
					<option data-locale="european" value="€ ">€ </option>
				</select>
				<input maxlength="20" class="" id="demo-number-value" value="55.33" type="text">
			</p>
			<p>Result: <strong><span id="demo-number-result">$ 55.33</span></strong></p>
		</div>


		<h4>Column formatting:</h4>

		<div class="well">
			<p>Edit the values in the table to see how <strong>formatColumn()</strong> keeps them aligned:</p>
			<table id="demo-column">
				<tbody>
					<tr>
						<td><input value="1000000" maxlength="20" type="text"></td>
						<td class="output">$ 1,000,000.00</td>
						<td class="output2">GBP 1,000,000</td>
					</tr>
					<tr>
						<td><input value="-5000" maxlength="20" type="text"></td>
						<td class="output">$    -5,000.00</td>
						<td class="output2">GBP   (5,000)</td>
					</tr>
					<tr>
						<td><input value="0" maxlength="20" type="text"></td>
						<td class="output">$         0.00</td>
						<td class="output2">GBP        --</td>
					</tr>
				</tbody>
			</table>
		</div>
	</section>


	<section id="instructions">
		<h2>Basic Instructions:</h2>

		<p>1. Download the script and put it somewhere, then reference it in your HTML like so:</p>
		<pre class="prettyprint"><span class="tag">&lt;script</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"path/to/accounting.js"</span><span class="tag">&gt;&lt;/script&gt;</span><span class="pln">

</span><span class="tag">&lt;script</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"text/javascript"</span><span class="tag">&gt;</span><span class="pln">
	</span><span class="com">// Library ready to use:</span><span class="pln">
	accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="lit">5318008</span><span class="pun">);</span><span class="pln">
</span><span class="tag">&lt;/script&gt;</span></pre>

		<p>2. See the documentation and source-code for full method/parameter information.</p>
	</section>


	<section id="documentation">

		<h2>Documentation</h2>

		<p>Information on the parameters of each method. See <a href="#methods" title="accounting.js library methods">library methods</a> above for more examples. Optional parameters are in <code><em>[italics]</em></code>, with the default value indicated.</p>


		<h4><strong>accounting.settings</strong></h4>

		<pre class="prettyprint lang-js"><span class="com">// Settings object that controls default parameters for library methods:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">settings </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
	currency</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
		symbol </span><span class="pun">:</span><span class="pln"> </span><span class="str">"$"</span><span class="pun">,</span><span class="pln">   </span><span class="com">// default currency symbol is '$'</span><span class="pln">
		format</span><span class="pun">:</span><span class="pln"> </span><span class="str">"%s%v"</span><span class="pun">,</span><span class="pln"> </span><span class="com">// controls output: %s = symbol, %v = value/number (can be object: see below)</span><span class="pln">
		decimal </span><span class="pun">:</span><span class="pln"> </span><span class="str">"."</span><span class="pun">,</span><span class="pln">  </span><span class="com">// decimal point separator</span><span class="pln">
		thousand</span><span class="pun">:</span><span class="pln"> </span><span class="str">","</span><span class="pun">,</span><span class="pln">  </span><span class="com">// thousands separator</span><span class="pln">
		precision </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pln">   </span><span class="com">// decimal places</span><span class="pln">
	</span><span class="pun">},</span><span class="pln">
	number</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
		precision </span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln">  </span><span class="com">// default precision on numbers is 0</span><span class="pln">
		thousand</span><span class="pun">:</span><span class="pln"> </span><span class="str">","</span><span class="pun">,</span><span class="pln">
		decimal </span><span class="pun">:</span><span class="pln"> </span><span class="str">"."</span><span class="pln">
	</span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// These can be changed externally to edit the library's defaults:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">settings</span><span class="pun">.</span><span class="pln">currency</span><span class="pun">.</span><span class="pln">format </span><span class="pun">=</span><span class="pln"> </span><span class="str">"%s %v"</span><span class="pun">;</span><span class="pln">

</span><span class="com">// Format can be an object, with `pos`, `neg` and `zero`:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">settings</span><span class="pun">.</span><span class="pln">currency</span><span class="pun">.</span><span class="pln">format </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
	pos </span><span class="pun">:</span><span class="pln"> </span><span class="str">"%s %v"</span><span class="pun">,</span><span class="pln">   </span><span class="com">// for positive values, eg. "$ 1.00" (required)</span><span class="pln">
	neg </span><span class="pun">:</span><span class="pln"> </span><span class="str">"%s (%v)"</span><span class="pun">,</span><span class="pln"> </span><span class="com">// for negative values, eg. "$ (1.00)" </span><em><span class="com">[optional]</span></em><span class="pln">
	zero</span><span class="pun">:</span><span class="pln"> </span><span class="str">"%s  -- "</span><span class="pln">  </span><span class="com">// for zero values, eg. "$  --" </span><em><span class="com">[optional]</span></em><span class="pln">
</span><span class="pun">};</span><span class="pln">

</span><span class="com">// Example using underscore.js - extend default settings (also works with $.extend in jQuery):</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">settings</span><span class="pun">.</span><span class="pln">number </span><span class="pun">=</span><span class="pln"> _</span><span class="pun">.</span><span class="pln">defaults</span><span class="pun">({</span><span class="pln">
	precision</span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln">
	thousand</span><span class="pun">:</span><span class="pln"> </span><span class="str">" "</span><span class="pln">
</span><span class="pun">},</span><span class="pln"> accounting</span><span class="pun">.</span><span class="pln">settings</span><span class="pun">.</span><span class="pln">number</span><span class="pun">);</span></pre>


		<h4><strong>accounting.formatMoney()</strong></h4>

		<pre class="prettyprint lang-js"><span class="com">// Standard usage and parameters (returns string):</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="pln">number</span><em><span class="pun">,[</span><span class="pln">symbol </span><span class="pun">=</span><span class="pln"> </span><span class="str">"$"</span><span class="pun">],[</span><span class="pln">precision </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">],[</span><span class="pln">thousand </span><span class="pun">=</span><span class="pln"> </span><span class="str">","</span><span class="pun">],[</span><span class="pln">decimal </span><span class="pun">=</span><span class="pln"> </span><span class="str">"."</span><span class="pun">],[</span><span class="pln">format </span><span class="pun">=</span><span class="pln"> </span><span class="str">"%s%v"</span><span class="pun">]</span></em><span class="pun">)</span><span class="pln">

</span><span class="com">// Second parameter can be an object:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="pln">number</span><em><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">options</span><span class="pun">]</span></em><span class="pun">)</span><span class="pln">

</span><span class="com">// Available fields in options object, matching `settings.currency`:</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> options </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
	symbol </span><span class="pun">:</span><span class="pln"> </span><span class="str">"$"</span><span class="pun">,</span><span class="pln">
	decimal </span><span class="pun">:</span><span class="pln"> </span><span class="str">"."</span><span class="pun">,</span><span class="pln">
	thousand</span><span class="pun">:</span><span class="pln"> </span><span class="str">","</span><span class="pun">,</span><span class="pln">
	precision </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln">
	format</span><span class="pun">:</span><span class="pln"> </span><span class="str">"%s%v"</span><span class="pln">
</span><span class="pun">};</span><span class="pln">

</span><span class="com">// Example usage:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="lit">12345678</span><span class="pun">);</span><span class="pln"> </span><span class="com">// $12,345,678.00</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="lit">4999.99</span><span class="pun">,</span><span class="pln"> </span><span class="str">"€"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="str">"."</span><span class="pun">,</span><span class="pln"> </span><span class="str">","</span><span class="pun">);</span><span class="pln"> </span><span class="com">// €4.999,99</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(-</span><span class="lit">500000</span><span class="pun">,</span><span class="pln"> </span><span class="str">"£ "</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="com">// £ -500,000</span><span class="pln">

</span><span class="com">// Example usage with options object:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">(</span><span class="lit">5318008</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
	symbol</span><span class="pun">:</span><span class="pln"> </span><span class="str">"GBP"</span><span class="pun">,</span><span class="pln">
	precision</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
	thousand</span><span class="pun">:</span><span class="pln"> </span><span class="str">"·"</span><span class="pun">,</span><span class="pln">
	format</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
		pos </span><span class="pun">:</span><span class="pln"> </span><span class="str">"%s %v"</span><span class="pun">,</span><span class="pln">
		neg </span><span class="pun">:</span><span class="pln"> </span><span class="str">"%s (%v)"</span><span class="pun">,</span><span class="pln">
		zero</span><span class="pun">:</span><span class="pln"> </span><span class="str">"%s  --"</span><span class="pln">
	</span><span class="pun">}</span><span class="pln">
</span><span class="pun">});</span><span class="pln">

</span><span class="com">// Will recursively format an array of values:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatMoney</span><span class="pun">([</span><span class="lit">123</span><span class="pun">,</span><span class="pln"> </span><span class="lit">456</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="lit">78</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span><span class="pun">]],</span><span class="pln"> </span><span class="str">"$"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="com">// ["$123", "$456", ["$78", "$9"]]</span></pre>



		<h4><strong>accounting.formatColumn()</strong></h4>

		<pre class="prettyprint lang-js"><span class="com">// Standard usage and parameters (returns array):</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatColumn</span><span class="pun">(</span><span class="pln">list</span><em><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">symbol </span><span class="pun">=</span><span class="pln"> </span><span class="str">"$"</span><span class="pun">],[</span><span class="pln">precision </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">],[</span><span class="pln">thousand </span><span class="pun">=</span><span class="pln"> </span><span class="str">","</span><span class="pun">],[</span><span class="pln">decimal </span><span class="pun">=</span><span class="pln"> </span><span class="str">"."</span><span class="pun">],[</span><span class="pln">format </span><span class="pun">=</span><span class="pln"> </span><span class="str">"%s%v"</span><span class="pun">]</span></em><span class="pun">)</span><span class="pln">

</span><span class="com">// Second parameter can be an object (see formatNumber for available options):</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatColumn</span><span class="pun">(</span><span class="pln">list</span><span class="pun">,</span><span class="pln"> </span><em><span class="pun">[</span><span class="pln">options</span><span class="pun">]</span></em><span class="pun">)</span><span class="pln">

</span><span class="com">// Example usage (NB. use a space after the symbol to add arbitrary padding to all values):</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> list </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">123</span><span class="pun">,</span><span class="pln"> </span><span class="lit">12345</span><span class="pun">];</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatColumn</span><span class="pun">(</span><span class="pln">list</span><span class="pun">,</span><span class="pln"> </span><span class="str">"$ "</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="com">// ["$    123", "$ 12,345"]</span><span class="pln">

</span><span class="com">// List of numbers can be a multi-dimensional array (formatColumn is applied recursively):</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> list </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[[</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">100</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="lit">900</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span><span class="pun">]];</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatColumn</span><span class="pun">(</span><span class="pln">list</span><span class="pun">);</span><span class="pln"> </span><span class="com">// [["$  1.00", "$100.00"], ["$900.00", "$  9.00"]]</span></pre>


		<h4><strong>accounting.formatNumber()</strong></h4>

		<pre class="prettyprint lang-js"><span class="com">// Standard usage and parameters (returns string):</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatNumber</span><span class="pun">(</span><span class="pln">number</span><em><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">precision </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="pln">thousand </span><span class="pun">=</span><span class="pln"> </span><span class="str">","</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="pln">decimal </span><span class="pun">=</span><span class="pln"> </span><span class="str">"."</span><span class="pun">]</span></em><span class="pun">)</span><span class="pln">

</span><span class="com">// Second parameter can also be an object matching `settings.number`:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatNumber</span><span class="pun">(</span><span class="pln">number</span><em><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">object</span><span class="pun">]</span></em><span class="pun">)</span><span class="pln">

</span><span class="com">// Example usage:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatNumber</span><span class="pun">(</span><span class="lit">9876543</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 9,876,543</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatNumber</span><span class="pun">(</span><span class="lit">4999.99</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="str">"."</span><span class="pun">,</span><span class="pln"> </span><span class="str">","</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 4.999,99</span><span class="pln">

</span><span class="com">// Example usage with options object:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatNumber</span><span class="pun">(</span><span class="lit">5318008</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
	precision </span><span class="pun">:</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln">
	thousand </span><span class="pun">:</span><span class="pln"> </span><span class="str">" "</span><span class="pln">
</span><span class="pun">});</span><span class="pln">

</span><span class="com">// Will recursively format an array of values:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">formatNumber</span><span class="pun">([</span><span class="lit">123456</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="lit">7890</span><span class="pun">,</span><span class="pln"> </span><span class="lit">123</span><span class="pun">]]);</span><span class="pln"> </span><span class="com">// ["123,456", ["7,890", "123"]]</span></pre>


		<h4><strong>accounting.toFixed()</strong></h4>

		<pre class="prettyprint lang-js"><span class="com">// Standard usage and parameters (returns string):</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">toFixed</span><span class="pun">(</span><span class="pln">number</span><em><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">precision </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">]</span></em><span class="pun">);</span><span class="pln">

</span><span class="com">// Example usage:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">toFixed</span><span class="pun">(</span><span class="lit">0.615</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span><span class="pln"> </span><span class="com">// "0.62"</span><span class="pln">

</span><span class="com">// Compare to regular JavaScript `Number.toFixed()` method:</span><span class="pln">
</span><span class="pun">(</span><span class="lit">0.615</span><span class="pun">).</span><span class="pln">toFixed</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span><span class="pln"> </span><span class="com">// "0.61"</span></pre>


		<h4><strong>accounting.unformat()</strong></h4>

		<pre class="prettyprint lang-js"><span class="com">// Standard usage and parameters (returns number):</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">unformat</span><span class="pun">(</span><span class="pln">string</span><em><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">decimal</span><span class="pun">]</span></em><span class="pun">);</span><span class="pln">

</span><span class="com">// Example usage:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">unformat</span><span class="pun">(</span><span class="str">"GBP £ 12,345,678.90"</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 12345678.9</span><span class="pln">

</span><span class="com">// If a non-standard decimal separator was used (eg. a comma) unformat() will need it in order to work out</span><span class="pln">
</span><span class="com">// which part of the number is a decimal/float:</span><span class="pln">
accounting</span><span class="pun">.</span><span class="pln">unformat</span><span class="pun">(</span><span class="str">"€ 1.000.000,00"</span><span class="pun">,</span><span class="pln"> </span><span class="str">","</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 1000000</span></pre>

	</section>


	<section id="roadmap">
		<h2>Roadmap</h2>

		<h4>Next Version:</h4>
		<ul>
			<li><s>Add more fine-grained control of formatting, with negatives and zero-values</s></li>
			<li><s>Implement <code>map()</code> and type-checking helper methods to clean up API methods</s></li>
			<li>Find performance bottlenecks and work on speed optimisations</li>
			<li>Write more tests, docs and examples, add FAQ</li>
			<li>Implement <a href="https://github.com/openexchangerates/accounting.js/issues/" title="accounting.js issues">feedback</a></li>
		</ul>

		<h4>Later:</h4>
		<ul>
			<li>Add padding parameter to override amount of space between currency symbol and value.</li>
			<li>Add digit-grouping control, to allow eg. "$10,0000"</li>
			<li>Add choice of rounding method for precision (up, down or nearest-neighbour).</li>
			<li>Add several other general and excel-style money formatting methods.</li>
			<li>Create NPM package, if there's demand for it.</li>
			<li>Create wrapper for jQuery as a separate plugin (not in core) to allow eg. <code>$('td.accounting').formatMoney()</code></li>
		</ul>

		<p>See the <a href="https://github.com/openexchangerates/accounting.js/issues" title="accounting.js issues">Github Issues page</a> for currently active issues.</p>
	</section>

	<section id="support">
		<h2>Feedback / Support</h2>

		<p>Please create issues on the <a href="https://github.com/openexchangerates/accounting.js" title="accounting.js Github repository">accounting.js Github repository</a> if you have feedback or need support, or <a href="mailto:info@openexchangerates.org" title="Contact Open Exchange Rates">contact Open Exchange Rates here</a>.</p>
	</section>

	<section id="download">
		<h2>Download</h2>

		<ul>
			<li><strong><a href="https://raw.github.com/openexchangerates/accounting.js/master/accounting.js" title="accounting.js">accounting.js</a></strong> - Latest version from Github (12kb)</li>
			<li><strong><a href="https://raw.github.com/openexchangerates/accounting.js/master/accounting.min.js" title="accounting.min.js">accounting.min.js</a></strong> - Latest version from Github (3kb, minified)</li>
			<li>Or check out the <a href="https://github.com/openexchangerates/accounting.js" title="accounting.js Github repository">accounting.js Github repository</a> for the full package.</li>
		</ul>
	</section>

	<section id="links">

		<h2>Links</h2>
		<p>accounting.js is maintained by <strong><a href="https://openexchangerates.org/" title="Open Exchange Rates free currency data API" target="_blank">Open Exchange Rates</a></strong> - the lightweight currency data API for startups, SMEs and Fortune 500s.</p>
		<p>Feedback, support or questions? <strong><a href="mailto:info@openexchangerates.org" title="Contact Open Exchange Rates">Contact Open Exchange Rates</a></strong> for guidance.</p>
		<p>Bugs, issues, suggestions or contributions? Please <strong><a href="https://github.com/openexchangerates/accounting.js" title="accounting.js Github repository">post them here</a></strong>.</p>
		<p>accounting.js works great with <strong><a href="http://openexchangerates.github.com/money.js" title="money.js - JavaScript currency conversion library">money.js</a></strong> - the tiny (1kb) standalone JavaScript currency conversion library, for web &amp; nodeJS</p>

		<br>
		<hr>
		<p><iframe style="width: 109px; height: 20px;" data-twttr-rendered="true" title="Twitter Tweet Button" class="twitter-share-button twitter-tweet-button twitter-share-button twitter-count-horizontal" src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/tweet_button_002.htm" allowtransparency="true" scrolling="no" id="twitter-widget-1" frameborder="0"></iframe> &nbsp; <div id="___plusone_1" style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 90px; height: 20px;"><iframe title="+1" data-gapiattached="true" src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/fastbutton_002.htm" name="I1_1423475349115" id="I1_1423475349115" vspace="0" tabindex="0" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" scrolling="no" marginwidth="0" marginheight="0" hspace="0" frameborder="0" width="100%"></iframe></div></p>
	</section>


	<script src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/accounting.js"></script>
	<script src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/jquery.js"></script>
	<script src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/prettify.js"></script>

	<script type="text/javascript">

		// demo functions:
		jQuery(document).ready(function($) {
			var numbers = [123.5, 3456.615, 777888.99, -5432, -1234567, 0];

			// Use accounting.js to format the list of numbers several ways:
			var formatted = accounting.formatColumn(numbers, "$ "),
			    different = accounting.formatColumn(numbers, {
			    	symbol:"HK$",
			    	precision:0,
			    	format: {
			    		pos : "%s %v",
			    		neg : "%s (%v)",
			    		zero : "%s --"
			    	}
			    }),
			    european  = accounting.formatColumn(numbers, {
			    	symbol: '&euro; ',
			    	thousand:'.',
			    	decimal:','
			    }),
			    symbolAfter = accounting.formatColumn(numbers, {
			    	symbol : "GBP",
			    	format : "%v %s"
			    });

			// Concat some nasty demo HTML:
			for ( var i = 0; i < numbers.length; i++ ) {
				$('<tr><td>'+numbers[i]+'</td><td>'+formatted[i]+'</td><td>'+different[i]+'</td><td>'+european[i]+'</td><td>'+symbolAfter[i]+'</td></tr>').appendTo('table#demo-table tbody');
			}


			// Try it yourself clicky demo:
			var $demoValue = $('#demo-number-value'),
			    $demoSymbol = $('#demo-number-symbol'),
			    $demoResult = $('#demo-number-result');

			$demoValue.add($demoSymbol).bind('keydown keyup keypress focus blur paste change', function() {
			 	var symbol = $demoSymbol.find(':selected').val(),
			 	    result = accounting.formatMoney(
			 	    	$demoValue.val(),
			 	    	symbol,
			 	    	2,
			 	    	($demoSymbol.find(':selected').data('locale') === 'european') ? "." : ",",
			 	    	($demoSymbol.find(':selected').data('locale') === 'european') ? "," : "."
			 	    );
				$demoResult.text(result);
			});


			// Try it yourself clicky column formatting demo:
			var $columnValues = $('#demo-column').find('input'),
			    $columnOutputs = $('#demo-column').find('.output'),
			    $columnOutputs2 = $('#demo-column').find('.output2');

			$columnValues.bind('keydown keyup keypress focus blur paste', function() {
			 	var list = $.map( $columnValues, function(each) { return $(each).val(); } ),
			 		formatted = accounting.formatColumn(list, {
			 			format : "%s %v"
			 		}),
			 		formatted2 = accounting.formatColumn(list, {
			 			symbol : "GBP",
			 			precision : 0,
			 			format : {
			 				pos : "%s %v",
			 				neg : "%s (%v)",
			 				zero: "%s --"
			 			}
			 		});

			 	$.each($columnOutputs, function(i, each) {
			 		$(each).text(formatted[i]);
			 	});
			 	$.each($columnOutputs2, function(i, each) {
			 		$(each).text(formatted2[i]);
			 	});
			});

		});

		// prettify:
		prettyPrint();

		// twitter:
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
			g.async = true;
			g.src = 'http://platform.twitter.com/widgets.js';
			s.parentNode.insertBefore(g, s);
		})(document, 'script');

		// google plus:
		window.___gcfg = {lang: 'en-GB'};
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	</script>


<iframe tabindex="-1" style="width: 1px; height: 1px; position: absolute; top: -100px;" src="accounting.js%20%20JavaScript%20number%20and%20currency%20formatting%20library_files/postmessageRelay.htm" id="oauth2relay1233831066" name="oauth2relay1233831066"></iframe></body></html>